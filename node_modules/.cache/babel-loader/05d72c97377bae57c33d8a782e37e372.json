{"ast":null,"code":"var _jsxFileName = \"/Users/amitalkobi/Projects/epicure/src/components/AddEdit/AddEditRest.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport Input from \"@mui/material/Input\";\nimport Button from \"@mui/material/Button\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport axios from \"axios\";\nimport qs from \"querystring\";\nimport \"./AddEditRest.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddEditRest = () => {\n  _s();\n\n  const id = window.location.pathname.split(\"/\")[3];\n  const isAddMode = !id;\n  const [chefs, setChefs] = useState([]);\n  const [chef, setChef] = useState();\n  const {\n    control,\n    handleSubmit,\n    register,\n    reset,\n    setValue,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      name: \"\",\n      chef: \"\",\n      pic: \"\"\n    },\n    mode: \"all\"\n  });\n\n  const onSubmit = rest => {\n    return isAddMode ? createRest(rest) : updateRest(id, rest);\n  };\n\n  const createRest = rest => {\n    (async () => {\n      const headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      };\n      await axios.post(\"http://localhost:3001/api/v1/restaurants\", qs.stringify(rest), {\n        headers: headers\n      });\n    })();\n  };\n\n  const updateRest = (id, rest) => {\n    (async () => {\n      const headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      };\n      await axios.put(\"http://localhost:3001/api/v1/restaurants/\" + id, qs.stringify(rest), {\n        headers: headers\n      });\n    })();\n  };\n\n  useEffect(() => {\n    (async () => {\n      const chefs = await axios(\"http://localhost:3001/api/v1/chefs\");\n      setChefs(chefs.data);\n    })();\n  }, []);\n  useEffect(() => {\n    if (!isAddMode) {\n      (async () => {\n        const res = await axios(\"http://localhost:3001/api/v1/restaurants/\" + id);\n        const fields = [\"name\", \"chef\", \"pic\"];\n        fields.forEach(field => setValue(field, res.data[field]));\n      })();\n    }\n  }, [id, isAddMode, setValue]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    onReset: reset,\n    className: \"rest-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isAddMode ? \"Add Restaurant\" : \"Edit Restaurant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"name\",\n            control: control,\n            rules: {\n              required: true,\n              maxLength: 20\n            },\n            render: () => /*#__PURE__*/_jsxDEV(Input, { ...register(\"name\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), errors.name && errors.name.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          className: \"input-error\",\n          children: \"Name is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), errors.name && errors.name.type === \"maxLength\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          className: \"input-error\",\n          children: \"Name length should be less than 20 characters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"pic\",\n            control: control,\n            rules: {\n              required: true\n            },\n            render: () => /*#__PURE__*/_jsxDEV(Input, { ...register(\"pic\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), errors.pic && errors.pic.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          className: \"input-error\",\n          children: \"Picture is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Chef\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"chef\",\n            control: control,\n            rules: {\n              required: true\n            },\n            render: () => /*#__PURE__*/_jsxDEV(Select, { ...register(\"chef\"),\n              label: \"Chef\",\n              children: chefs.map(chef => {\n                return /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: chef,\n                  children: chef.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 28\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), errors.chef && errors.chef.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          className: \"input-error\",\n          children: \"Chef is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-button-cont\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddEditRest, \"gEOcPzFDzquNS9nceC6H9jIToJ0=\", false, function () {\n  return [useForm];\n});\n\n_c = AddEditRest;\nexport default AddEditRest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEditRest\");","map":{"version":3,"sources":["/Users/amitalkobi/Projects/epicure/src/components/AddEdit/AddEditRest.tsx"],"names":["React","useEffect","useState","Controller","useForm","Input","Button","Select","MenuItem","axios","qs","AddEditRest","id","window","location","pathname","split","isAddMode","chefs","setChefs","chef","setChef","control","handleSubmit","register","reset","setValue","formState","errors","defaultValues","name","pic","mode","onSubmit","rest","createRest","updateRest","headers","post","stringify","put","data","res","fields","forEach","field","required","maxLength","type","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport Input from \"@mui/material/Input\";\nimport Button from \"@mui/material/Button\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport axios from \"axios\";\nimport qs from \"querystring\";\nimport \"./AddEditRest.scss\";\n\nconst AddEditRest = () => {\n  const id = window.location.pathname.split(\"/\")[3];\n  const isAddMode = !id;\n  const [chefs, setChefs] = useState<any>([]);\n  const [chef, setChef] = useState<any>();\n\n  const {\n    control,\n    handleSubmit,\n    register,\n    reset,\n    setValue,\n    formState: { errors },\n  }: any = useForm({\n    defaultValues: {\n      name: \"\",\n      chef: \"\",\n      pic: \"\",\n    },\n    mode: \"all\",\n  });\n\n  const onSubmit = (rest: any) => {\n    return isAddMode ? createRest(rest) : updateRest(id, rest);\n  };\n\n  const createRest = (rest: any) => {\n    (async () => {\n      const headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      };\n\n      await axios.post(\n        \"http://localhost:3001/api/v1/restaurants\",\n        qs.stringify(rest),\n        { headers: headers }\n      );\n    })();\n  };\n\n  const updateRest = (id: string, rest: any) => {\n    (async () => {\n      const headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      };\n\n      await axios.put(\n        \"http://localhost:3001/api/v1/restaurants/\" + id,\n        qs.stringify(rest),\n        { headers: headers }\n      );\n    })();\n  };\n\n  useEffect(() => {\n    (async () => {\n      const chefs = await axios(\"http://localhost:3001/api/v1/chefs\");\n      setChefs(chefs.data);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!isAddMode) {\n      (async () => {\n        const res = await axios(\n          \"http://localhost:3001/api/v1/restaurants/\" + id\n        );\n        const fields = [\"name\", \"chef\", \"pic\"];\n        fields.forEach((field) => setValue(field, res.data[field]));\n      })();\n    }\n  }, [id, isAddMode, setValue]);\n\n  return (\n    <form\n      onSubmit={handleSubmit(onSubmit)}\n      onReset={reset}\n      className=\"rest-form\"\n    >\n      <h1>{isAddMode ? \"Add Restaurant\" : \"Edit Restaurant\"}</h1>\n      <div className=\"input-container\">\n        <div>\n          <div className=\"input-field\">\n            <label>Name</label>\n            <Controller\n              name=\"name\"\n              control={control}\n              rules={{ required: true, maxLength: 20 }}\n              render={() => <Input {...register(\"name\")} />}\n            />\n          </div>\n          {errors.name && errors.name.type === \"required\" && (\n            <span role=\"alert\" className=\"input-error\">\n              Name is required\n            </span>\n          )}\n          {errors.name && errors.name.type === \"maxLength\" && (\n            <span role=\"alert\" className=\"input-error\">\n              Name length should be less than 20 characters\n            </span>\n          )}\n        </div>\n        <div>\n          <div className=\"input-field\">\n            <label>Picture</label>\n            <Controller\n              name=\"pic\"\n              control={control}\n              rules={{ required: true }}\n              render={() => <Input {...register(\"pic\")} />}\n            />\n          </div>\n          {errors.pic && errors.pic.type === \"required\" && (\n            <span role=\"alert\" className=\"input-error\">\n              Picture is required\n            </span>\n          )}\n        </div>\n        <div>\n          <div className=\"input-field\">\n            <label>Chef</label>\n            <Controller\n              name=\"chef\"\n              control={control}\n              rules={{ required: true }}\n              render={() => (\n                <Select {...register(\"chef\")} label=\"Chef\">\n                  {chefs.map((chef: any) => {\n                    return <MenuItem value={chef}>{chef.name}</MenuItem>;\n                  })}\n                </Select>\n              )}\n            />\n          </div>\n          {errors.chef && errors.chef.type === \"required\" && (\n            <span role=\"alert\" className=\"input-error\">\n              Chef is required\n            </span>\n          )}\n        </div>\n      </div>\n      <div className=\"input-button-cont\">\n        <Button type=\"submit\" variant=\"contained\">\n          Save\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddEditRest;\n"]},"metadata":{},"sourceType":"module"}
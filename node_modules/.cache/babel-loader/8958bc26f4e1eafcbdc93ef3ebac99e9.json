{"ast":null,"code":"var _jsxFileName = \"/Users/amitalkobi/Projects/epicure/src/components/AddEditRest/AddEditRest.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useLocation } from \"react-router\";\nimport Input from \"@mui/material/Input\";\nimport Button from \"@mui/material/Button\";\nimport axios from \"axios\";\nimport qs from \"querystring\";\nimport \"./AddEditRest.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddEditRest = () => {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const id = state ? state.id : null;\n  const isAddMode = !id;\n  const {\n    control,\n    handleSubmit,\n    register,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      name: \"\",\n      chefName: \"\",\n      pic: \"\",\n      dishes: \"\"\n    },\n    mode: \"all\"\n  });\n\n  const onSubmit = rest => {\n    return isAddMode ? createRest(rest) : updateRest(id, rest);\n  };\n\n  const createRest = rest => {\n    (async () => {\n      const headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      };\n      const res = await axios.post(\"http://localhost:3001/api/v1/restaurants\", qs.stringify(rest), {\n        headers: headers\n      });\n    })();\n  };\n\n  const updateRest = (id, data) => {// return userService.update(id, data)\n    //     .then(() => {\n    //         alertService.success('User updated', { keepAfterRouteChange: true });\n    //         history.push('..');\n    //     })\n    //     .catch(alertService.error);\n  }; // const [user, setUser] = useState({});\n  // const [showPassword, setShowPassword] = useState(false);\n  // useEffect(() => {\n  //     if (!isAddMode) {\n  //         // get user and set form fields\n  //         userService.getById(id).then(user => {\n  //             const fields = ['title', 'firstName', 'lastName', 'email', 'role'];\n  //             fields.forEach(field => setValue(field, user[field]));\n  //             setUser(user);\n  //         });\n  //     }\n  // }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    onReset: reset,\n    className: \"rest-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isAddMode ? \"Add Restaurant\" : \"Edit Restaurant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"name\",\n          control: control,\n          rules: {\n            required: true,\n            maxLength: 20\n          },\n          render: () => /*#__PURE__*/_jsxDEV(Input, { ...register(\"name\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), errors.name && errors.name.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: \"Name is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), errors.name && errors.name.type === \"maxLength\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: \"Name length should be less than 20 characters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Chef Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"chefName\",\n          control: control,\n          rules: {\n            required: true\n          },\n          render: () => /*#__PURE__*/_jsxDEV(Input, { ...register(\"chefName\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), errors.chefName && errors.chefName.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: \"Chef name is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"pic\",\n          control: control,\n          rules: {\n            required: true\n          },\n          render: () => /*#__PURE__*/_jsxDEV(Input, { ...register(\"pic\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), errors.pic && errors.pic.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: \"Picture is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Dishes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"dishes\",\n          control: control,\n          render: () => /*#__PURE__*/_jsxDEV(Input, { ...register(\"dishes\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-button-cont\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddEditRest, \"1R0sB1hQkF/CrZ4ZBmMMGZKy5do=\", false, function () {\n  return [useLocation, useForm];\n});\n\n_c = AddEditRest;\nexport default AddEditRest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEditRest\");","map":{"version":3,"sources":["/Users/amitalkobi/Projects/epicure/src/components/AddEditRest/AddEditRest.tsx"],"names":["React","Controller","useForm","useLocation","Input","Button","axios","qs","AddEditRest","state","id","isAddMode","control","handleSubmit","register","reset","formState","errors","defaultValues","name","chefName","pic","dishes","mode","onSubmit","rest","createRest","updateRest","headers","res","post","stringify","data","required","maxLength","type"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useLocation } from \"react-router\";\nimport Input from \"@mui/material/Input\";\nimport Button from \"@mui/material/Button\";\nimport axios from \"axios\";\nimport qs from \"querystring\";\nimport \"./AddEditRest.scss\";\n\nconst AddEditRest = () => {\n  const { state } = useLocation();\n  const id = state ? state.id : null;\n  const isAddMode = !id;\n\n  const {\n    control,\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors },\n  }: any = useForm({\n    defaultValues: {\n      name: \"\",\n      chefName: \"\",\n      pic: \"\",\n      dishes: \"\",\n    },\n    mode: \"all\",\n  });\n\n  const onSubmit = (rest: any) => {\n    return isAddMode ? createRest(rest) : updateRest(id, rest);\n  };\n\n  const createRest = (rest: any) => {\n    (async () => {\n      const headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      };\n\n      const res = await axios.post(\n        \"http://localhost:3001/api/v1/restaurants\",\n        qs.stringify(rest),\n        { headers: headers }\n      );\n    })();\n  };\n\n  const updateRest = (id: string, data: any) => {\n    // return userService.update(id, data)\n    //     .then(() => {\n    //         alertService.success('User updated', { keepAfterRouteChange: true });\n    //         history.push('..');\n    //     })\n    //     .catch(alertService.error);\n  };\n\n  // const [user, setUser] = useState({});\n  // const [showPassword, setShowPassword] = useState(false);\n\n  // useEffect(() => {\n  //     if (!isAddMode) {\n  //         // get user and set form fields\n  //         userService.getById(id).then(user => {\n  //             const fields = ['title', 'firstName', 'lastName', 'email', 'role'];\n  //             fields.forEach(field => setValue(field, user[field]));\n  //             setUser(user);\n  //         });\n  //     }\n  // }, []);\n\n  return (\n    <form\n      onSubmit={handleSubmit(onSubmit)}\n      onReset={reset}\n      className=\"rest-form\"\n    >\n      <h1>{isAddMode ? \"Add Restaurant\" : \"Edit Restaurant\"}</h1>\n      <div className=\"input-container\">\n        <div className=\"input-field\">\n          <label>Name</label>\n          <Controller\n            name=\"name\"\n            control={control}\n            rules={{ required: true, maxLength: 20 }}\n            render={() => <Input {...register(\"name\")} />}\n          />\n          {errors.name && errors.name.type === \"required\" && (\n            <span role=\"alert\">Name is required</span>\n          )}\n          {errors.name && errors.name.type === \"maxLength\" && (\n            <span role=\"alert\">\n              Name length should be less than 20 characters\n            </span>\n          )}\n        </div>\n        <div className=\"input-field\">\n          <label>Chef Name</label>\n          <Controller\n            name=\"chefName\"\n            control={control}\n            rules={{ required: true }}\n            render={() => <Input {...register(\"chefName\")} />}\n          />\n          {errors.chefName && errors.chefName.type === \"required\" && (\n            <span role=\"alert\">Chef name is required</span>\n          )}\n        </div>\n        <div className=\"input-field\">\n          <label>Picture</label>\n          <Controller\n            name=\"pic\"\n            control={control}\n            rules={{ required: true }}\n            render={() => <Input {...register(\"pic\")} />}\n          />\n          {errors.pic && errors.pic.type === \"required\" && (\n            <span role=\"alert\">Picture is required</span>\n          )}\n        </div>\n        <div className=\"input-field\">\n          <label>Dishes</label>\n          <Controller\n            name=\"dishes\"\n            control={control}\n            render={() => <Input {...register(\"dishes\")} />}\n          />\n        </div>\n      </div>\n      <div className=\"input-button-cont\">\n        <Button type=\"submit\" variant=\"contained\">\n          Save\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddEditRest;\n"]},"metadata":{},"sourceType":"module"}